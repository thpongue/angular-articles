Tree shaking is a step in a build process that removes unused code from a code base. The name is a quirky metaphor to describe a process similar to shaking out the dead leaves in a tree.

Tree shaking isn't unique to Angular. It is an important part of the compilation process though because Angular is a large codebase with a great deal of functionality.
No Angular app is realistically going to need everything Angular offers so it is useful to remove anything that isn't needed.

If you're a typical Angular CLI user then tree-shaking happens automatically on all prod builds.

Dynamic vs static imports
--------------------------------------------------------------

One of the requirements for tree shaking is that imports cannot be dynamic eg
if (blah) {
	import thing A
} else {
	import thing B
}

At compile time it's impossible to know which branch will be taken, hence both imports have to be pulled in.

The typescript convention of having static imports outside of any code logic means that typescript has one important prerequisite for tree shaking.


Unused imports and unused functions removed
--------------------------------------------------------------

The first one seems like common sense - even my IDE knows which imports aren't used. These are stripped out.

The second part is a bit more clever. These means that if I import a class with 2 methods and I use 1 of them then the other 1 gets stripped out.


Webpack and uglify
--------------------------------------------------------------

Angular has nothing to do with tree shaking. Webpack uses uglify which has an "unused" option. Setting this to true instructs uglify to remove unused code.
