Schematics are a template-based system for modifying your CLI project. Usually a set of related schematics will be bundled up into an npm package. This is known as a collection.

For example, the cypress schematic has functionality for removing the default e2e tool, protractor, as well as more standardised methods for running the cypress tests.

The great thing about this is that everyone doesn't have to roll their own solutions. If I've used Cypress for 1 Angular project then the tooling should be the same for the next.

There are 3 types of schematic:
1. add eg ng add @angular/pwa - turns your app into a PWA by adding things like a service worker, manifest etc
2. generate ng generate @angular/material:table - adds a material table to your project
3. update - this adds a little more functionality to an npm install, as it also has the ability to update your project as well as its package dependencies

All of the existing code generation tooling in the CLI uses schematics under the hood.
For example, ng generate component uses this: https://github.com/angular/angular-cli/blob/master/packages/schematics/angular/component/index.ts

The value of update is best illustrated by the console output when upgrading a CLI project from 8 to 9.

command:
> ng update @angular/cli @angular/core

console output:
The installed Angular CLI version is older than the latest stable version.
Installing a temporary version to perform the update.
Installing packages for tooling via npm.
Installed packages for tooling via npm.
Using package manager: 'npm'
Collecting installed dependencies...
Found 30 dependencies.
Fetching dependency metadata from registry...
    Updating package.json with dependency @angular/cli @ "9.0.1" (was "8.3.23")...
    Updating package.json with dependency @angular/core @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular-devkit/build-angular @ "0.900.1" (was "0.803.23")...
    Updating package.json with dependency @angular/language-service @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/compiler-cli @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/animations @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency zone.js @ "0.10.2" (was "0.9.1")...
    Updating package.json with dependency @angular/common @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/compiler @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency rxjs @ "6.5.4" (was "6.4.0")...
    Updating package.json with dependency @angular/platform-browser-dynamic @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/forms @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/platform-browser @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency @angular/router @ "9.0.0" (was "8.2.14")...
    Updating package.json with dependency typescript @ "3.7.5" (was "3.5.3")...
UPDATE package.json (1285 bytes)
✔ Packages installed successfully.
** Executing migrations of package '@angular/cli' **

❯ Angular Workspace migration.
  Update an Angular CLI workspace to version 9.
UPDATE angular.json (3605 bytes)
UPDATE tsconfig.app.json (272 bytes)
UPDATE package.json (1288 bytes)
✔ Packages installed successfully.
  Migration completed.

❯ Lazy loading syntax migration.
  Update lazy loading syntax to use dynamic imports.
  Migration completed.

** Executing migrations of package '@angular/core' **

❯ Static flag migration.
  Removes the `static` flag from dynamic queries.
  As of Angular 9, the "static" flag defaults to false and is no longer required for your view and content queries.
  Read more about this here: https://v9.angular.io/guide/migration-dynamic-flag
UPDATE src/app/todolist/todolist.component.ts (1501 bytes)
  Migration completed.

❯ Missing @Injectable and incomplete provider definition migration.
  In Angular 9, enforcement of @Injectable decorators for DI is a bit stricter and incomplete provider definitions behave differently.
  Read more about this here: https://v9.angular.io/guide/migration-injectable
  Migration completed.

❯ ModuleWithProviders migration.
  In Angular 9, the ModuleWithProviders type without a generic has been deprecated.
  This migration adds the generic where it is missing.
  Read more about this here: https://v9.angular.io/guide/migration-module-with-providers
  Migration completed.

❯ Renderer to Renderer2 migration.
  As of Angular 9, the Renderer class is no longer available.
  Renderer2 should be used instead.
  Read more about this here: https://v9.angular.io/guide/migration-renderer
  Migration completed.

❯ Undecorated classes with decorated fields migration.
  As of Angular 9, it is no longer supported to have Angular field decorators on a class that does not have an Angular decorator.
  Read more about this here: https://v9.angular.io/guide/migration-undecorated-classes
  Migration completed.

❯ Undecorated classes with DI migration.
  As of Angular 9, it is no longer supported to use Angular DI on a class that does not have an Angular decorator.
  Read more about this here: https://v9.angular.io/guide/migration-undecorated-classes
  Migration completed.
