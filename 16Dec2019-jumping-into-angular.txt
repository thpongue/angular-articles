Angular is hard to just jump into.

Lets ignore for now the tooling required: mainly the Angular CLI, NPM and Webpack
Lets ignore the requirement to learn TypeScript
Lets ignore the additional tools such as karma, jasmine and protractor which are essential parts of the ecosystem

The process of iteratively working out how to do things involves a different approach to technologies I have worked with before.

For much of my career, I would often go through a process like:
- jump into a new piece of code
- make a mistake
- look at the error message
- look at a stack trace
- deduce the underlying issue
- fix the problem

With Angular I tried the same approach but ended up with something like:
- jump into a new piece of code
- make a mistake
- look at the error message
- look at the stack trace
- frequently not understand the error message
- scroll down the stack trace
- usually recognise something I wrote near the bottom, but there's too much fluff in between my bit and the error to want to step through it
- chuck the error message into google
- find something on stackoverflow

After having a similar experience to this dozens of times, I'd often just put the error straight into google. After a while I realise that the framework was actually training me not to try to work things out myself.

Here is a contrived example after using the cli to create a hello world app: Removing AppRoutingModule from the module imports but leaving <router-outlet></router-outlet> in the template. The runtime error is:

Uncaught Error: Template parse errors:
'router-outlet' is not a known element:
1. If 'router-outlet' is an Angular component, then verify that it is part of this module.
2. If 'router-outlet' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message. ("

[ERROR ->]<router-outlet></router-outlet>
"): ng:///AppModule/AppComponent.html@537:0
    at syntaxError (compiler.js:2175)
    at TemplateParser.parse (compiler.js:11388)
    at JitCompiler._parseTemplate (compiler.js:25963)
    at JitCompiler._compileTemplate (compiler.js:25951)
    at compiler.js:25895
    at Set.forEach (<anonymous>)
    at JitCompiler._compileComponents (compiler.js:25895)
    at compiler.js:25808
    at Object.then (compiler.js:2166)
    at JitCompiler._compileModuleAndComponents (compiler.js:25807)
    
The error message doesn't tell me what to do. The stack trace doesn't help. I'm totally reliant on my interpretation of the error message, and any contextual knowledge I have.

To be fair to Angular, error messaging has improved since I started with Angular 2. For common errors it works pretty well. Before writing this article I played with faking up some errors with Pipes and they were very clear and helpful. But this isn't always the case, and I can't be the only developer feeling uneasy about outsourcing a key developer skill to stackoverflow.

I have concluded that the best way to work with Angular is to learn the framework very well. It is improving but it's still not suited to diving in. Many errors can be picked up quickly by someone who understands the ideas behind Angular. For example, if you know how module imports work and you know that Angular relies heavily on module imports you have a much better chance of quickly getting to the bottom of our fake example above.

I've always enjoyed diving into problems - breaking things and fixing things along the way. Angular has changed how I work. I have a better theoretical knowledge of the tool, but I am also a little uneasy about those baffling stack traces.

Is this just how it is now?

