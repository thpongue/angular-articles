How do we kick off an Angular CLI app? What is generated by the CLI and how does it piece these together into something that actually works? What's bootstrapping?
I find it helps to get into the code. The quickest way to do so is to create an angular CLI app and check out how it works:
ng new hello-world

With this in place, lets find the starting point. Poking around in the src directory of our new project we find 2 pieces of the puzzle:
- main.ts
- index.html

main,ts clearly contains code for starting off our app:
platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

But index.html also has something Angulary-looking: <app-root></app-root>

Digging a little deeper, there are a few other typescript files where we see 2 more things of note:
- In the AppModule (app.module.ts) there is a reference to AppComponent in the bootstrap array
- In AppComponent (app.component.ts) the selector is app-root - the same as we found in the index.html

We can deduce a few things here:
- Angular takes a reference to a module (called AppModule) and uses it to bootstrap (ie start running) our app
- Somehow Angular recognises app-root and will - somehow - takes the AppComponent (with its app-root selector) and puts it into our page

Lets explore a little more by running the app to see what happens:
- ng start
- open localhost:4200 in your browser (lets assume chrome)
- open chrome dev tools
- click on the elements tab

Notable things here are:
- all the scripts needed to run an Angular app have been added to to the bottom of the body
- the app-root has been filled with the contents of the AppComponent template
- the app-root selector has been appended with some additional attributes including the angular version

Its getting a little clearer now:
- We start with an index.html containing a custom selector called app-root
- We call platformBrowserDynamic().bootstrapModule(AppModule) passing a reference to our module (AppModule)
- The module contains a reference to our component (AppComponent) in its bootstrap array
- the AppComponent specifies the app-root selector - so Angular knows where it lives in our index.html

An aside: At this point, my curiosity took me into the Angular code. That way lies madness. Anyway - implementation details change over time.
Unless you have a bloody good reason and lots of time on your hands you will learn how Angular works more quickly via good articles and their official docs than stepping through their code.

Instead, lets paraphrase the docs a little to finish this article up:
- Every Angular application has at least 1 module. By convention the first module is called the AppModule.
- Your module describes which Angular objects are available. In this case one of these objects is the AppComponent (for components, directives and pipes we do this by including them in the declarations array)
- Angular apps can also define a bootstrap array. This is an essential addition, without which our application will never get kicked off.
- Angular knows about our AppComponent because it's included in the declarations array. This isn't enough to insert the component into our index.html file - hence its also in the bootstrap array. This instructs Angular to find the correctly named selector and initiate the app from there.
(slight aside, but we can also bootstrap using the ngDoBootstrap in our module class - new in Angular 7)

There's a lot of magic in this process, and stepping into the code to work out the framework is particularly hard in the Angular world.

I'm slightly frustrated by the fact that I need to either accept the surface explanation of what the bootstrapping process involves, or dive in myself. I'd love it if the Angular docs gave us a accessible deep dive into this subject.

In short, I know what to do. I kind of understand what Angular is doing. But at this point I don't know how it does it.

I'm going to have to step back into the codebase aren't I...
