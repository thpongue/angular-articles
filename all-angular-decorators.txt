All the angular decorators - I've given a brief description of each too

module decorator
-------------------------------------------------------

@NgModule
- define a collection of components, directives, pipes and injectables (see the class decorators below) plus import other require modules


class decorators
-------------------------------------------------------

@Component
- combines class logic (with lifecycle hooks), an html template, css and a selector so the component can be referenced by other components
- by convention these are elements

@Directive
- these can be either structural (change the DOM) or attribute (change the appearance or behavior of an element, component, or another directive).
- Has no css or template
- by convention these are attributes

@Pipe
- specify an operator that can be used in your template which changes the value of an object

@Injectable
- marks a service as injectable (but without the providedIn parameter it doesn't know which provider) and enables the service to be injected into


class field decorators
-------------------------------------------------------
@Input
- tells angular to bind to an input property in the template using [squareBracketsSyntax]=myValue

@Output
- tells angular to bind to an output property in the template using (bracketsSyntax)=myMethod()
- note that the convention is to use an EventEmitter for this

@HostBinding
- one-way bind to any class, property or attribute of the host element eg @HostBinding(‘class.active’)... , @HostBinding('attr.myAttribute')...
- note - to get the value of an attribute (rather than setting it) use the @Attribute constructor binding

@HostListener
- bind to any element event all call the specified function eg @HostListener('mouseover') onHover() { window.alert("hover"); }

@ContentChild
- single form of ContentChildren used to get anything passed using content projection
- uses either a hash reference, directive (including component) type  or directive (or component) selector to return a child reference.
- in the params object set static to false and use the object in the ngAfterContentInit lifecycle hook
- returns a typed component/directive or ElementRef

@ContentChildren
- plural for of ContentChild
- as above but returns QueryList (which includes an observable to listen for changes)
- no option to set as static

@ViewChild
- same as @ContentChild but for all items in the template
- use the ngAfterViewInit lifecycle hook

@ViewChildren
- same as @ContentChildren for for all items in the template
- use the ngAfterViewInit lifecycle hook


constructor parameters
-------------------------------------------------------

@Attribute
- a parameter decorator for directives which tell the constructor the value of an attribute of the element
- You can treat these as the getter of an existing attribute, as opposed to using @HostBinding('attr.myAttribute') which works as a setter

@Self
- a parameter decorator to tell the hierarchical DI to only look in the providers for this object

@SkipSelf
- a parameter decorator to tell the hierarchical DI to look in the host (parent) providers and above for the dependency

@Host
- a parameter decorator to tell the hierarchical DI to look in its own providers otherwise check in its host (parent) providers (but not above its direct host) for the dependency

@Optional
- tells the DI not to error out if no dependency is found

@Inject
- a way to manually specify an injector token. Rarely used
