Dependency Injection (DI) is a coding pattern in which a class asks for dependencies from external sources rather than creating them itself.

In Angular DI is used for services.

There are 2 sides to this:
1. Being an injectee (is there a better way to say this? being the receiver?)
2. Being injected

1. Being an injectee

The simple bit - just add the @Injectable() decorator to your service and you can then inject other services into it's constructor.

Alternatively (but less commonly) use the @Inject decorator in the constructor.
eg
constructor(@Inject(MyService) private myService) { }


2. Being injected

This takes a little more explanation (but mainly just pay attention to the first way (a) below as this is mostly what you'll see)

There are 2 ways to make a service available for injection

(a). add {providedIn: root} to the @Injectable() decorator for your service
This is the most common way, and is the default method used when generating services with the angular CLI. It allows the service to self-register with your root module. You can change root to any module name to register with other modules but this is less common.

(b). add the service to the providers array of the module or service. 

(a) is the Service telling the module it wants to be part of it, (b) is the module or consuming service telling the service it wants to use it.

Angular takes this information to create an injector hierarchy. All services within the hierarchy share a new instance of a service unless a new provider further down the hierarchy tells the current module / service and all of its children to use a new instance. 

This serves as an intro. As with everything Angular-related check out the docs and prepare your mind for the ModuleInjector, ElementInjector, the implications for tree-shaking and dozens of other related topics.
